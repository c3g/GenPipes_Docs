.. _docs_steps_rnaseq_denovo:
  
.. spelling::

      picard 
      blastx
      gqSeqUtils
      Protists
      kegg
      rds

Step Details
-------------

.. _Picard SAM to FastQ:

**Picard SAM to FastQ**

Convert SAM/BAM files from the input readset file into FASTQ format if FASTQ files are not already specified in the readset file. Do nothing otherwise.

.. _Trimmomatic Step:

**Trimmomatic**

Raw reads quality trimming and removing of Illumina adapters is performed using `Trimmomatic Tool <http://www.usadellab.org/cms/index.php?page=trimmomatic>`_. If an adapter FASTA file is specified in the config file (section 'trimmomatic', param 'adapter_fasta'), it is used first. Else, 'Adapter1' and 'Adapter2' columns from the readset file are used to create an adapter FASTA file, given then to Trimmomatic. For PAIRED_END readsets, readset adapters are reversed-complemented and swapped, to match Trimmomatic Palindrome strategy. For SINGLE_END readsets, only Adapter1 is used and left unchanged.

This step takes as input files:

* FASTQ files from the readset file if available
* Else, FASTQ output files from previous picard_sam_to_fastq conversion of BAM files

.. _Merge Trimmomatic Stats:

**Merge Trimmomatic Stats**

The trim statistics per readset are merged at this step.

.. _InSilico Read Normalization of Readsets:

**InSilico Read Normalization of Readsets**

Normalize each readset, using the Trinity normalization utility.

.. _InSilico Read Normalization (All):

**InSilico Read Normalization (All)**

Merge all normalized readsets together and normalize the result, using the Trinity normalization utility.

.. _Trinity Step:

**Trinity**

Create a de novo assembly from normalized readsets using `Trinity tool <https://github.com/trinityrnaseq/trinityrnaseq/wiki>`_.

.. _Exonerate FASTA Split:

**Exonerate FASTA Split**

Split the Trinity assembly FASTA into chunks for further parallel BLAST annotations.

.. _BLASTX Trinity UniProt:

**BLASTX Trinity UniProt**

Annotate Trinity FASTA chunks with Swiss-Prot and UniRef databases using `BLAST Tool <https://blast.ncbi.nlm.nih.gov/Blast.cgi>`_.

.. _BLASTX Trinity UniProt Merge:

**BLASTX Trinity UniProt Merge**

Merge blastx Swiss-Prot and UniRef chunks results.

.. _TransDecoder Step:

**TransDecoder Step**

Identifies candidate coding regions within transcript sequences using `Transdecoder <https://github.com/TransDecoder/TransDecoder/wiki>`_.

.. _HMMER Biosequence Analysis Step:

**HMMER Biosequence Analysis Step**

Identifies protein domains using `HMMER Biosequence Analysis <http://hmmer.janelia.org/>`_

.. _RNAmmer Method:

**RNAmmer Method**

Identify potential rRNA transcripts using `RNAmmer Transcriptome <http://www.cbs.dtu.dk/services/RNAmmer/>`_.

.. _BLAST Transdecoder UniProt:

**BLAST Transdecoder UniProt**

Search Transdecoder-predicted coding regions for sequence homologies on UniProt using `BLASTP <https://blast.ncbi.nlm.nih.gov/Blast.cgi>`_.

.. _SignalP Method:

**SignalP Method**

Predict the presence of signal peptides and the location of their cleavage sites in proteins using `SignalP <http://www.cbs.dtu.dk/services/SignalP/>`_.

.. _TMHMM Method:

**TMHMM Method**

This step involves prediction of transmembrane helices regions in proteins using `TMHMM <http://www.cbs.dtu.dk/services/TMHMM/>`_.

.. _Trinotate Step:

**Trinotate**

This step performs transcriptome functional annotation and analysis using `Trinotate Annotation suite <https://github.com/Trinotate/Trinotate.github.io/wiki>`_. ll functional annotation data is integrated into a SQLite database and a whole annotation report is created.

.. _Align and estimate Abundance Prep Reference:

**Align and estimate Abundance Prep Reference**

Index Trinity FASTA file for further abundance estimation using `Trinity align_and_estimate_abundance.pl utility`_.

.. _Align and estimate Abundance:

**Align and estimate Abundance**

Estimate transcript abundance using RNA-Seq by Expectation-Maximization `(RSEM) <http://deweylab.github.io/RSEM/>`_ via `Trinity align_and_estimate_abundance.pl utility`_.

.. _Exploratory Analysis with gqSeqUtils R package:

**Exploratory Analysis with gqSeqUtils R package**

This step performs exploratory analysis using the gqSeqUtils R package.

.. _Differential Expression:

**Differential Expression**

This step performs differential gene expression analysis using `DESeq package <http://bioconductor.org/packages/release/bioc/html/DESeq.html>`_ and `edgeR package <http://www.bioconductor.org/packages/release/bioc/html/edgeR.html>`_. Merge the results of the analysis in a single csv file. Also,this pipeline step performs Gene Ontology analysis for RNA-Seq denovo Assembly using the Bioconductor's R package `goseq`_. It generates GO annotations for differential genes and isoforms expression analysis, based on associated GOTERMS generated by `Trinotate Step`_ earlier.

.. _Filter Annotated Components:

**Filter Annotated Components**

This step filters high quality contigs based on values in trinotate annotations. It also recreates a high quality contigs fasta file and run Assembly statistics using the gqSeqUtils R package.

.. _Exploratory Analysis with subset of filtered transcripts:

**Exploratory Analysis with subset of filtered transcripts**

In this step, exploratory analysis is performed by the gqSeqUtils R package using a subset of filtered transcripts.

.. _GOSEQ using filtered transcripts:

**GOSEQ using filtered transcripts**

In this step, differential expression and `goseq`_ analysis is performed based on filtered transcripts and genes.

.. _Merge FASTQ:

**Merge FASTQ**

In this step FASTQ files are merged if the sample contains multiple readsets. One FASTQ file is crated for each sample.

.. _Seq2Fun Step:

**Seq2Fun Step**

For most non-model organisms, biological understanding of study outcomes is limited to protein-coding genes with functional annotations such as KEGG pathways or Gene Ontology or PANTHER classification system. Therefore, Seq2Fun databases focused on functionally annotated genes such as KOs largely meets the preferred needs of most scientists studying non-model organisms.

.. note::

    We have stored number of pre-built databases by the Seq2Fun developers and the list can be found below.

    -  Eukaryotes
    -  Animals
    -  Plants
    -  Fungi
    -  Protists
    -  Mammals
    -  Birds
    -  Reptiles
    -  Amphibians
    -  Fishes
    -  Arthropods
    -  Nematodes

    For further information see `Seq2Fun Database details here <https://github.com/xia-lab/Seq2Fun#step-3-database-download>`.

    You can specify the required database in a custom.ini file by changing "group" key. The default group is "birds".

    * These KOs in the database are KOs assigned to KEGG pathways and they are only a proportion of whole list of KOs.
    * All KOs include KOs not assigned to KEGG pathways.

The Seq2Fun step takes FASTQ files from the readset file as input if available. Otherwise, it uses FASTQ output files from previous `Picard SAM to FastQ`_ conversion of BAM files. The seq2fun analysis is performed in this step and generates output files including `KO abundance table <https://www.seq2fun.ca/manual.xhtml#sect4>`_ and `KO mapped fastq files <https://www.seq2fun.ca/manual.xhtml#sect20>`_.  These output files can be used for downstream analysis using `Network Analyst web application <https://www.networkanalyst.ca/NetworkAnalyst/uploads/TableUploadView.xhtml>`_. The interested comparisons should be specified using a design file (Format is similar to the default RNA-seq design file). Therefore, only pairwise comparisons are possible unlike the original Seq2Fun program.

.. note::

     Treatment and controls will be added in the design file depending upon what input is provided, FASTQ files from the readset or FASTQ output files from the previous `Picard SAM to FastQ`_ conversion of BAM files step.

If you want to compare multiple groups you will have to break the comparison in to pairs.

For example, for 3 group comparison, the design file should be as follows:

::

   Sample   A_vs_B   B_vs_C  A_vs_C
   A1       1        0       1
   B1       2        1       0
   A2       1        0       1
   B2       2        1       0
   C1       0        2       2
   C2       0        2       2

Seq2Fun analysis is performed using FASTQ files and it generates a sample table.

.. _Differential Expression Seq2Fun:

**Differential Expression Seq2Fun**

`DESeq2 <https://bioconductor.org/packages/release/bioc/html/DESeq2.html>`_ and `edgeR`_ are used to perform differential KO expression analysis in this step.

.. _Pathway Enrichment Seq2Fun:

**Pathway Enrichment Seq2Fun**

In this step, a `KEGG ortholog <https://www.genome.jp/kegg/ko.html>`_ pathway analysis is performed using `fgsea`_ R package. 

Current KEGG database used for the analysis was created on August, 2021. If you'd like to update the database, please follow below instructions to download the latest KEGG pathway database and create pathway list for the kegg_all key in the ini file and kegg.rds file. Download the latest KEGG database.

**Instructions for download on Linux**

:: 

    wget http://rest.kegg.jp/list/pathway`
    sed -i 's/path://g' pathway
    mv pathway KEGG_all_pathways.txt

**Instructions for download using R**

::

    library(data.table)
    pathway_list <- fread("KEGG_all_pathways.txt", header =F)`
    kegg_ko <- lapply(unique(pathway_list$mapID), fun)
    names(kegg_ko) <- (pathway_list$mapID)
    kegg <- lapply(kegg_ko, substring, 4)
    saveRDS(kegg, "kegg.rds")

After downloading the database and performing the steps listed above, next, specify created files in a custom ini file.

``user_pathway_list`` is a file with pathway that are interested with KEGG map id (only one column). You must specify the file path to the ``user_pathway_list`` in a ``custom.ini`` file.


.. HTML links commonly used in this file

.. _Trinity align_and_estimate_abundance.pl utility: https://github.com/trinityrnaseq/trinityrnaseq
.. _goseq: http://www.bioconductor.org/packages/release/bioc/html/goseq.html
